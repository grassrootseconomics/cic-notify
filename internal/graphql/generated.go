// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type Account_type_enum string

const (
	Account_type_enumCustodialBusiness     Account_type_enum = "CUSTODIAL_BUSINESS"
	Account_type_enumCustodialCommunity    Account_type_enum = "CUSTODIAL_COMMUNITY"
	Account_type_enumCustodialPersonal     Account_type_enum = "CUSTODIAL_PERSONAL"
	Account_type_enumCustodialSystem       Account_type_enum = "CUSTODIAL_SYSTEM"
	Account_type_enumNonCustodialBusiness  Account_type_enum = "NON_CUSTODIAL_BUSINESS"
	Account_type_enumNonCustodialCommunity Account_type_enum = "NON_CUSTODIAL_COMMUNITY"
	Account_type_enumNonCustodialPersonal  Account_type_enum = "NON_CUSTODIAL_PERSONAL"
	Account_type_enumNonCustodialSystem    Account_type_enum = "NON_CUSTODIAL_SYSTEM"
)

type Interface_type_enum string

const (
	Interface_type_enumApp      Interface_type_enum = "APP"
	Interface_type_enumTelegram Interface_type_enum = "TELEGRAM"
	Interface_type_enumUssd     Interface_type_enum = "USSD"
)

// PrepareMessagePayloadAccounts includes the requested fields of the GraphQL type accounts.
// The GraphQL type's documentation follows.
//
// columns and relationships of "accounts"
type PrepareMessagePayloadAccounts struct {
	Blockchain_address string            `json:"blockchain_address"`
	Account_type       Account_type_enum `json:"account_type"`
	// An object relationship
	User PrepareMessagePayloadAccountsUserUsers `json:"user"`
}

// GetBlockchain_address returns PrepareMessagePayloadAccounts.Blockchain_address, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccounts) GetBlockchain_address() string { return v.Blockchain_address }

// GetAccount_type returns PrepareMessagePayloadAccounts.Account_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccounts) GetAccount_type() Account_type_enum { return v.Account_type }

// GetUser returns PrepareMessagePayloadAccounts.User, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccounts) GetUser() PrepareMessagePayloadAccountsUserUsers {
	return v.User
}

// PrepareMessagePayloadAccountsUserUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type PrepareMessagePayloadAccountsUserUsers struct {
	Interface_type       Interface_type_enum `json:"interface_type"`
	Interface_identifier string              `json:"interface_identifier"`
	// An object relationship
	Personal_information PrepareMessagePayloadAccountsUserUsersPersonal_information `json:"personal_information"`
}

// GetInterface_type returns PrepareMessagePayloadAccountsUserUsers.Interface_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccountsUserUsers) GetInterface_type() Interface_type_enum {
	return v.Interface_type
}

// GetInterface_identifier returns PrepareMessagePayloadAccountsUserUsers.Interface_identifier, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccountsUserUsers) GetInterface_identifier() string {
	return v.Interface_identifier
}

// GetPersonal_information returns PrepareMessagePayloadAccountsUserUsers.Personal_information, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccountsUserUsers) GetPersonal_information() PrepareMessagePayloadAccountsUserUsersPersonal_information {
	return v.Personal_information
}

// PrepareMessagePayloadAccountsUserUsersPersonal_information includes the requested fields of the GraphQL type personal_information.
// The GraphQL type's documentation follows.
//
// columns and relationships of "personal_information"
type PrepareMessagePayloadAccountsUserUsersPersonal_information struct {
	Family_name string `json:"family_name"`
	Given_names string `json:"given_names"`
}

// GetFamily_name returns PrepareMessagePayloadAccountsUserUsersPersonal_information.Family_name, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccountsUserUsersPersonal_information) GetFamily_name() string {
	return v.Family_name
}

// GetGiven_names returns PrepareMessagePayloadAccountsUserUsersPersonal_information.Given_names, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadAccountsUserUsersPersonal_information) GetGiven_names() string {
	return v.Given_names
}

// PrepareMessagePayloadResponse is returned by PrepareMessagePayload on success.
type PrepareMessagePayloadResponse struct {
	// An array relationship
	Accounts []PrepareMessagePayloadAccounts `json:"accounts"`
	// fetch data from the table: "vouchers"
	Vouchers []PrepareMessagePayloadVouchers `json:"vouchers"`
}

// GetAccounts returns PrepareMessagePayloadResponse.Accounts, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadResponse) GetAccounts() []PrepareMessagePayloadAccounts {
	return v.Accounts
}

// GetVouchers returns PrepareMessagePayloadResponse.Vouchers, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadResponse) GetVouchers() []PrepareMessagePayloadVouchers {
	return v.Vouchers
}

// PrepareMessagePayloadVouchers includes the requested fields of the GraphQL type vouchers.
// The GraphQL type's documentation follows.
//
// columns and relationships of "vouchers"
type PrepareMessagePayloadVouchers struct {
	Symbol string `json:"symbol"`
}

// GetSymbol returns PrepareMessagePayloadVouchers.Symbol, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadVouchers) GetSymbol() string { return v.Symbol }

// __PrepareMessagePayloadInput is used internally by genqlient
type __PrepareMessagePayloadInput struct {
	FromAddress    string `json:"fromAddress"`
	ToAddress      string `json:"toAddress"`
	VoucherAddress string `json:"voucherAddress"`
}

// GetFromAddress returns __PrepareMessagePayloadInput.FromAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetFromAddress() string { return v.FromAddress }

// GetToAddress returns __PrepareMessagePayloadInput.ToAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetToAddress() string { return v.ToAddress }

// GetVoucherAddress returns __PrepareMessagePayloadInput.VoucherAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetVoucherAddress() string { return v.VoucherAddress }

func PrepareMessagePayload(
	ctx context.Context,
	client graphql.Client,
	fromAddress string,
	toAddress string,
	voucherAddress string,
) (*PrepareMessagePayloadResponse, error) {
	req := &graphql.Request{
		OpName: "PrepareMessagePayload",
		Query: `
query PrepareMessagePayload ($fromAddress: String!, $toAddress: String!, $voucherAddress: String!) {
	accounts(where: {blockchain_address:{_in:[$fromAddress,$toAddress]},account_type:{_in:[CUSTODIAL_SYSTEM,CUSTODIAL_BUSINESS,CUSTODIAL_PERSONAL,CUSTODIAL_COMMUNITY]}}) {
		blockchain_address
		account_type
		user {
			interface_type
			interface_identifier
			personal_information {
				family_name
				given_names
			}
		}
	}
	vouchers(where: {voucher_address:{_eq:$voucherAddress}}) {
		symbol
	}
}
`,
		Variables: &__PrepareMessagePayloadInput{
			FromAddress:    fromAddress,
			ToAddress:      toAddress,
			VoucherAddress: voucherAddress,
		},
	}
	var err error

	var data PrepareMessagePayloadResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
