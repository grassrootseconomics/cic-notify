// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type Account_type_enum string

const (
	Account_type_enumCustodialBusiness     Account_type_enum = "CUSTODIAL_BUSINESS"
	Account_type_enumCustodialCommunity    Account_type_enum = "CUSTODIAL_COMMUNITY"
	Account_type_enumCustodialPersonal     Account_type_enum = "CUSTODIAL_PERSONAL"
	Account_type_enumCustodialSystem       Account_type_enum = "CUSTODIAL_SYSTEM"
	Account_type_enumNonCustodialBusiness  Account_type_enum = "NON_CUSTODIAL_BUSINESS"
	Account_type_enumNonCustodialCommunity Account_type_enum = "NON_CUSTODIAL_COMMUNITY"
	Account_type_enumNonCustodialPersonal  Account_type_enum = "NON_CUSTODIAL_PERSONAL"
	Account_type_enumNonCustodialSystem    Account_type_enum = "NON_CUSTODIAL_SYSTEM"
)

type Interface_type_enum string

const (
	Interface_type_enumApp      Interface_type_enum = "APP"
	Interface_type_enumTelegram Interface_type_enum = "TELEGRAM"
	Interface_type_enumUssd     Interface_type_enum = "USSD"
)

// PrepareMessagePayloadReceiverAccounts includes the requested fields of the GraphQL type accounts.
// The GraphQL type's documentation follows.
//
// columns and relationships of "accounts"
type PrepareMessagePayloadReceiverAccounts struct {
	Blockchain_address string            `json:"blockchain_address"`
	Account_type       Account_type_enum `json:"account_type"`
	// An object relationship
	User PrepareMessagePayloadReceiverAccountsUserUsers `json:"user"`
}

// GetBlockchain_address returns PrepareMessagePayloadReceiverAccounts.Blockchain_address, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccounts) GetBlockchain_address() string {
	return v.Blockchain_address
}

// GetAccount_type returns PrepareMessagePayloadReceiverAccounts.Account_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccounts) GetAccount_type() Account_type_enum {
	return v.Account_type
}

// GetUser returns PrepareMessagePayloadReceiverAccounts.User, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccounts) GetUser() PrepareMessagePayloadReceiverAccountsUserUsers {
	return v.User
}

// PrepareMessagePayloadReceiverAccountsUserUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type PrepareMessagePayloadReceiverAccountsUserUsers struct {
	Interface_type       Interface_type_enum `json:"interface_type"`
	Interface_identifier string              `json:"interface_identifier"`
	// An object relationship
	Personal_information PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information `json:"personal_information"`
}

// GetInterface_type returns PrepareMessagePayloadReceiverAccountsUserUsers.Interface_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsers) GetInterface_type() Interface_type_enum {
	return v.Interface_type
}

// GetInterface_identifier returns PrepareMessagePayloadReceiverAccountsUserUsers.Interface_identifier, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsers) GetInterface_identifier() string {
	return v.Interface_identifier
}

// GetPersonal_information returns PrepareMessagePayloadReceiverAccountsUserUsers.Personal_information, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsers) GetPersonal_information() PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information {
	return v.Personal_information
}

// PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information includes the requested fields of the GraphQL type personal_information.
// The GraphQL type's documentation follows.
//
// columns and relationships of "personal_information"
type PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information struct {
	Family_name   string `json:"family_name"`
	Given_names   string `json:"given_names"`
	Language_code string `json:"language_code"`
}

// GetFamily_name returns PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information.Family_name, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information) GetFamily_name() string {
	return v.Family_name
}

// GetGiven_names returns PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information.Given_names, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information) GetGiven_names() string {
	return v.Given_names
}

// GetLanguage_code returns PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information.Language_code, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadReceiverAccountsUserUsersPersonal_information) GetLanguage_code() string {
	return v.Language_code
}

// PrepareMessagePayloadResponse is returned by PrepareMessagePayload on success.
type PrepareMessagePayloadResponse struct {
	// An array relationship
	Sender []PrepareMessagePayloadSenderAccounts `json:"sender"`
	// An array relationship
	Receiver []PrepareMessagePayloadReceiverAccounts `json:"receiver"`
	// fetch data from the table: "vouchers"
	Vouchers []PrepareMessagePayloadVouchers `json:"vouchers"`
}

// GetSender returns PrepareMessagePayloadResponse.Sender, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadResponse) GetSender() []PrepareMessagePayloadSenderAccounts {
	return v.Sender
}

// GetReceiver returns PrepareMessagePayloadResponse.Receiver, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadResponse) GetReceiver() []PrepareMessagePayloadReceiverAccounts {
	return v.Receiver
}

// GetVouchers returns PrepareMessagePayloadResponse.Vouchers, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadResponse) GetVouchers() []PrepareMessagePayloadVouchers {
	return v.Vouchers
}

// PrepareMessagePayloadSenderAccounts includes the requested fields of the GraphQL type accounts.
// The GraphQL type's documentation follows.
//
// columns and relationships of "accounts"
type PrepareMessagePayloadSenderAccounts struct {
	Blockchain_address string            `json:"blockchain_address"`
	Account_type       Account_type_enum `json:"account_type"`
	// An object relationship
	User PrepareMessagePayloadSenderAccountsUserUsers `json:"user"`
}

// GetBlockchain_address returns PrepareMessagePayloadSenderAccounts.Blockchain_address, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccounts) GetBlockchain_address() string {
	return v.Blockchain_address
}

// GetAccount_type returns PrepareMessagePayloadSenderAccounts.Account_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccounts) GetAccount_type() Account_type_enum {
	return v.Account_type
}

// GetUser returns PrepareMessagePayloadSenderAccounts.User, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccounts) GetUser() PrepareMessagePayloadSenderAccountsUserUsers {
	return v.User
}

// PrepareMessagePayloadSenderAccountsUserUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type PrepareMessagePayloadSenderAccountsUserUsers struct {
	Interface_type       Interface_type_enum `json:"interface_type"`
	Interface_identifier string              `json:"interface_identifier"`
	// An object relationship
	Personal_information PrepareMessagePayloadSenderAccountsUserUsersPersonal_information `json:"personal_information"`
}

// GetInterface_type returns PrepareMessagePayloadSenderAccountsUserUsers.Interface_type, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsers) GetInterface_type() Interface_type_enum {
	return v.Interface_type
}

// GetInterface_identifier returns PrepareMessagePayloadSenderAccountsUserUsers.Interface_identifier, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsers) GetInterface_identifier() string {
	return v.Interface_identifier
}

// GetPersonal_information returns PrepareMessagePayloadSenderAccountsUserUsers.Personal_information, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsers) GetPersonal_information() PrepareMessagePayloadSenderAccountsUserUsersPersonal_information {
	return v.Personal_information
}

// PrepareMessagePayloadSenderAccountsUserUsersPersonal_information includes the requested fields of the GraphQL type personal_information.
// The GraphQL type's documentation follows.
//
// columns and relationships of "personal_information"
type PrepareMessagePayloadSenderAccountsUserUsersPersonal_information struct {
	Family_name   string `json:"family_name"`
	Given_names   string `json:"given_names"`
	Language_code string `json:"language_code"`
}

// GetFamily_name returns PrepareMessagePayloadSenderAccountsUserUsersPersonal_information.Family_name, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsersPersonal_information) GetFamily_name() string {
	return v.Family_name
}

// GetGiven_names returns PrepareMessagePayloadSenderAccountsUserUsersPersonal_information.Given_names, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsersPersonal_information) GetGiven_names() string {
	return v.Given_names
}

// GetLanguage_code returns PrepareMessagePayloadSenderAccountsUserUsersPersonal_information.Language_code, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadSenderAccountsUserUsersPersonal_information) GetLanguage_code() string {
	return v.Language_code
}

// PrepareMessagePayloadVouchers includes the requested fields of the GraphQL type vouchers.
// The GraphQL type's documentation follows.
//
// columns and relationships of "vouchers"
type PrepareMessagePayloadVouchers struct {
	Symbol string `json:"symbol"`
}

// GetSymbol returns PrepareMessagePayloadVouchers.Symbol, and is useful for accessing the field via an interface.
func (v *PrepareMessagePayloadVouchers) GetSymbol() string { return v.Symbol }

// __PrepareMessagePayloadInput is used internally by genqlient
type __PrepareMessagePayloadInput struct {
	FromAddress    string `json:"fromAddress"`
	ToAddress      string `json:"toAddress"`
	VoucherAddress string `json:"voucherAddress"`
}

// GetFromAddress returns __PrepareMessagePayloadInput.FromAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetFromAddress() string { return v.FromAddress }

// GetToAddress returns __PrepareMessagePayloadInput.ToAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetToAddress() string { return v.ToAddress }

// GetVoucherAddress returns __PrepareMessagePayloadInput.VoucherAddress, and is useful for accessing the field via an interface.
func (v *__PrepareMessagePayloadInput) GetVoucherAddress() string { return v.VoucherAddress }

func PrepareMessagePayload(
	ctx context.Context,
	client graphql.Client,
	fromAddress string,
	toAddress string,
	voucherAddress string,
) (*PrepareMessagePayloadResponse, error) {
	req := &graphql.Request{
		OpName: "PrepareMessagePayload",
		Query: `
query PrepareMessagePayload ($fromAddress: String!, $toAddress: String!, $voucherAddress: String!) {
	sender: accounts(where: {blockchain_address:{_eq:$fromAddress},account_type:{_in:[CUSTODIAL_SYSTEM,CUSTODIAL_BUSINESS,CUSTODIAL_PERSONAL,CUSTODIAL_COMMUNITY]}}) {
		blockchain_address
		account_type
		user {
			interface_type
			interface_identifier
			personal_information {
				family_name
				given_names
				language_code
			}
		}
	}
	receiver: accounts(where: {blockchain_address:{_eq:$toAddress},account_type:{_in:[CUSTODIAL_SYSTEM,CUSTODIAL_BUSINESS,CUSTODIAL_PERSONAL,CUSTODIAL_COMMUNITY]}}) {
		blockchain_address
		account_type
		user {
			interface_type
			interface_identifier
			personal_information {
				family_name
				given_names
				language_code
			}
		}
	}
	vouchers(where: {voucher_address:{_eq:$voucherAddress}}) {
		symbol
	}
}
`,
		Variables: &__PrepareMessagePayloadInput{
			FromAddress:    fromAddress,
			ToAddress:      toAddress,
			VoucherAddress: voucherAddress,
		},
	}
	var err error

	var data PrepareMessagePayloadResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
